{"status":"ok","feed":{"url":"https://medium.com/feed/@emmanuelodii80","title":"Stories by Emmanuel Odii on Medium","link":"https://medium.com/@emmanuelodii80?source=rss-6bf89630698b------2","author":"","description":"Stories by Emmanuel Odii on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*urianex_H3N9EL-Sy8KEnA.jpeg"},"items":[{"title":"A Comprehensive Guide to Shipping Your SaaS Product with Next.js, Planetscale, and Prisma ORM","pubDate":"2023-09-26 12:51:11","link":"https://medium.com/@emmanuelodii80/a-comprehensive-guide-to-shipping-your-saas-product-with-next-js-planetscale-and-prisma-orm-39e4e669f7ff?source=rss-6bf89630698b------2","guid":"https://medium.com/p/39e4e669f7ff","author":"Emmanuel Odii","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*WsLzulox-m3YezXP7H1HeQ.png","description":"\n<p>The easiest way to build and launch a saas product in\u00a02023.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WsLzulox-m3YezXP7H1HeQ.png\"></figure><p>Developing a SaaS tool can be overwhelming with lots of boilerplate.</p>\n<p>If you don\u2019t have the all the time to set up boilerplate codes (e.g auth, DNS records, payment webhooks, etc), <br>Then, you need <a href=\"https://shipfa.st/?via=76b1ktxw7bbln9yvdrh9\">ShipFast</a>. Shipfast saves <strong>18+</strong> hrs of development headache\u00a0, it\u2019s trusted by 300+ devs and it has a very great documentation.</p>\n<p>If you\u2019re cool with developing every part of the application, then read on as I show you how to build and launch your <strong>waitlist.</strong></p>\n<p><strong>Prerequisites:</strong><br>- Must have a little development experience.</p>\n<p>As stated, we\u2019d be using next js with typescript and prisma in this\u00a0post.</p>\n<p>This isn\u2019t going to be a Next js tutorial. we\u2019re going to focus on the very important part of building and launching the application. <br>Feel free to check the documentation for <a href=\"https://nextjs.org/\">next js</a> and\u00a0<a href=\"https://prisma.io/\">prisma</a>.</p>\n<h3>Very important definitions</h3>\n<p><strong>What is PlanetScale? </strong><br>PlanetScale is a database-as-a-service platform that specializes in providing a scalable and highly available database solution for modern cloud-native applications. It is designed to simplify the management of databases, particularly those based on the <strong>MySQL</strong> open-source database system.<br><a href=\"https://planetscale.com/\">read\u00a0more</a></p>\n<p><strong>What is Prisma?<br></strong>Prisma is an open-source Object relational mapping library for modern web development. It allows developers write queries in Javascript/Typescript.</p>\n<p>Prisma offers some prouducts to developers. read more<br>Out of all those, we\u2019d be interested in 2 from all the product offers.<br>What are they?<br>- <a href=\"https://www.prisma.io/docs/concepts/components/prisma-client\">Prisma client</a>\u200a\u2014\u200aThis includes methods we consume from the libraries in order to send queries to our database.<br>- <a href=\"https://www.prisma.io/studio\">Prisma studio</a>\u200a\u2014\u200aA workspace where you see the data in your database.</p>\n<h3>Start here</h3>\n<p><strong>Create your database<br>- </strong>Open a browser and visit <a href=\"https:planetscale.com\">planetscale.co</a>m<br>- Sign up for a free account. (you get the ability to create one database for <strong>free</strong>)<br>- Create a database and select the closest region to your physical location. This will help reduce\u00a0latency</p>\n<p><strong>Setting up prisma<br></strong>If you have an existing Next js project, just skip this\u00a0step.</p>\n<p>To create a new Next js app, spin up a console and run the following command npx create-next-app@latest</p>\n<p>It asks you a few questions as pertaining the app, take your time to answer them and let the installation process\u00a0begin.</p>\n<p>Go, I\u2019d wait for you\u00a0\u2615\ufe0f</p>\n<p>Now, let\u2019s build a waitlist for our\u00a0product.</p>\n<p>Do the following when it\u2019s finished installing:<br>1. Create a basic form component</p>\n<p>I\u2019d provide a boilerplate for\u00a0this.</p>\n<pre>// components/form.tsx<br>import React, { useState } from \"react\";<br><br><br>export const Form = memo(({ onSubmit }) =&gt; {<br>  const [state, setState] = useState({<br>    name: null,<br>    email: null,<br>    request: null,<br>  });<br>  const handleInputChange = (field, value) =&gt; {<br>    setState((prev) =&gt; ({ ...prev, [field]: value }));<br>  };<br>  const handleSubmitForm = (e) =&gt; {<br>    e.preventDefault();<br>    const { name, email, request } = state<br>    const formData = { name, email, request};<br>    // Call the onSubmit function passed from the parent component<br>    handleSubmit(formData);<br>  };<br>  return (<br>    &lt;form onSubmit={handleSubmit}&gt;<br>      &lt;label htmlFor=\"name\"&gt;Name&lt;/label&gt;<br>      &lt;input<br>        value={state.name || \"\"}<br>        id=\"name\"<br>        onChange={(e) =&gt; handleInputChange(\"name\", e.target.value)}<br>      /&gt;<br>      &lt;label htmlFor=\"email\"&gt;Email&lt;/label&gt;<br>      &lt;input<br>        value={state.email || \"\"}<br>        id=\"email\"<br>        onChange={(e) =&gt; handleInputChange(\"email\", e.target.value)}<br>      /&gt;<br>      &lt;label htmlFor=\"request\"&gt;Request&lt;/label&gt;<br>      &lt;input<br>        value={state.request || \"\"}<br>        id=\"request\"<br>        onChange={(e) =&gt; handleInputChange(\"request\", e.target.value)}<br>      /&gt;<br>    &lt;button type='submit'&gt;submit&lt;/button&gt;<br>    &lt;/form&gt;<br>  );<br>};<br>)</pre>\n<p>2. Render it in your index.jsx file (<em>if you specified pages directory from installation</em>). OR page.jsx (<em>if you specified app directory from installation</em>)<br>3. Run npm run dev to start the local server and navigate to the URL your terminal suggests. It\u2019s usually on <a href=\"http://localhost/\"><strong>http://localhost:3000</strong>.</a></p>\n<p>Open a terminal again in the same directory and run npx prisma init to generate a prisma folder with all basic setup as well as a\u00a0<strong>.env </strong>file where we need to store our database credentials</p>\n<p>Move to the newly generated\u00a0<strong>.env </strong>file, you\u2019d see a varaible <strong>DATABASE_URL</strong> set to a string. Just leave it like that, we\u2019d get to it in a\u00a0bit.</p>\n<p><strong>Defining your schema<br></strong>Now, in your <strong>schema.prisma </strong>file inside of the <strong>prisma </strong>directory, update the datasource and client to the following</p>\n<pre>generator client {<br>  provider = \"prisma-client-js\"<br>  previewFeatures = [\"referentialIntegrity\"]<br>}<br></pre>\n<pre>datasource db {<br>  provider = \"mysql\"<br>  url = env(\"DATABASE_URL\")<br>  referentialIntegrity = \"prisma\"<br>}</pre>\n<p>PlanetScale doesn\u2019t support <strong>foreign key constraints</strong> as it\u2019s MySQL based, and Prisma defaults to expressing relations via foreign keys, we need to set this referentialIntegrity property when using Prisma with PlanetScale.</p>\n<p>Now, we need to create data models (<em>a.k.a</em> <em>entities</em>) In this case User (as we decided to build a simple waitlist). <br>The model will store the Users id\u00a0, name, email, request).</p>\n<pre>model User {<br>  id         @id @default(autoincrement())<br>  name       String<br>  email      String<br>  request    String<br>}</pre>\n<p>Now, we\u2019re almost set to preview the User table with <strong>prisma\u00a0studio</strong></p>\n<p><strong>Running migrations for the\u00a0schema</strong></p>\n<ol>\n<li>Go to your PlanetScale\u2019s dashboard, and copy the URL for the database you\u00a0created.</li>\n<li>Move to your\u00a0.env file and replace the value for DATABASE_URL with the one you have\u00a0copied.</li>\n<li>Open a terminal and run the following commandnpx prisma db push\u00a0. <br>Congratulations, We ran our first migration. (<em>This means that the User model defined in the</em><em>schema.prisma file got registered to our database as an\u00a0entity</em>)</li>\n<li>Now, we\u2019re set to view the User entity and the column it has. <br>\ud83e\udd14 How do I do this?<br>It\u2019s easy. just run this command from a terminal npx prisma studio and navigate to the URL your terminal suggests. It\u2019s usually on <a href=\"http://localhost:5555/\"><strong>http://localhost:5555/</strong></a>\n</li>\n</ol>\n<p><strong>Creating your API\u00a0routes</strong></p>\n<p>We\u2019re going to be using Nextjs\u2019 app router for this, which means all our components are automatically rendered on the server side. <a href=\"https://nextjs.org/docs/app\">learn\u00a0more</a></p>\n<p>In the example below, we\u2019d be creating a function that returns a user information by passing the email as an argument to the function.</p>\n<pre>// lib/utils<br>import { PrismaClient } from \"@/prisma/client\"<br><br>const prisma = new PrismaClient()<br>export const createUser = async (email, name, request) =&gt; {<br>  try {<br>    const user = await prisma.user.create({<br>      data: {<br>        email,<br>        name,<br>        request<br>      },<br>    });<br>    console.log('User created:', user);<br>  } catch (error) {<br>    console.error('Error creating user:', error);<br>  }<br>}<br><br>export const fetchUserWithEmail = async (email) =&gt; {<br>  return await prisma.user.findUnque({<br>     where: { email }<br>  })<br>}</pre>\n<p>There you go! <br>\ud83d\ude15 Typescript devs be like: How does prisma finds a user object during compile\u00a0time?</p>\n<p>It\u2019s simple, prisma has a generic function that registers any instantiated model. <br>You don\u2019t care. Right? just stay a consumer\u00a0\ud83d\ude06</p>\n<p><strong>Adding and consuming data from\u00a0Nextjs</strong></p>\n<p>We can now add a user to database from the Form component we already created in the previous section.<br>I\u2019d provide an example below. (<em>using Nextjs\u2019 app\u00a0router)</em></p>\n<pre>import { Form } from 'components/form'<br>import { createUser } from 'path-to-lib'<br><br>const Page = () =&gt; {<br>  const handleSubmit = useCallback( async (formdata) =&gt; {<br>       createUser(formData)<br>       console.log('User created sucessfully')<br>  }, [formData])<br>  return &lt;Form onSubmit={handleSubmit}/&gt;;<br>}<br>export default Page</pre>\n<p><strong>Get records from a\u00a0database</strong></p>\n<p>We can also use the return value of fetchAllUsers in a component to give discounts to users that joined the waitlist.</p>\n<pre>import { fetchUserWithEmail } from 'path-to-lib'<br>import { useEffect } from 'react'<br><br>useEffect(() =&gt; {<br>    fetchUserWithEmail(email)<br>      .then((user) =&gt; setDiscount(user?.hasDiscount || false))<br>      .catch((error) =&gt; {<br>        console.error(\"Error fetching user\", error);<br>      });<br>  }, [email]);<br>  return (<br>    &lt;section&gt;<br>      { discount<br>          ? (&lt;div&gt;has discount :)&lt;/div&gt;)<br>          : (&lt;div&gt;no discount :(&lt;/div&gt;)<br>       }<br>    &lt;/section&gt;<br>);<br>}</pre>\n<p><strong>Deployments</strong></p>\n<p>Now, we\u2019re ready to deploy our application using\u00a0<strong>vercel</strong></p>\n<p>Follow this\u00a0steps</p>\n<ul>\n<li>Create a github repository and push your code to the repository</li>\n<li>Open a browser and visit <a href=\"https://vercel.com/\">vercel.com</a>\n</li>\n<li>Sign up for a free\u00a0accont</li>\n<li>Go to your dashboard and upload the git repository where your code lives\u00a0in</li>\n<li>Add the environment variables that your app depends on. In our case, it\u2019s DATABASE_URL, also add the value for it in the appropriate field. (<em>No fear, the value will be encrypted)</em>\n</li>\n<li>Just click the deploy button and allow it run the build command automatically.</li>\n</ul>\n<p><strong>\ud83c\udf89 Congratulations!!</strong> You\u2019ve just shipped the waitlist for your\u00a0SaaS.</p>\n<h3>Conclusion</h3>\n<p>If you got up to this point, congratulations again. You\u2019re definetly upto something \ud83d\ude09</p>\n<p>And If you won\u2019t have the time to set up these boilerplate codes, then i recommend you use <a href=\"https://shipfa.st/?via=76b1ktxw7bbln9yvdrh9\">ShipFast</a>. It\u2019s helped me and other devs built faster with ready-made templates for Auth, Mails, UI Components, DNS Records, Payment Webhooks, etc.</p>\n<p>Lastly, if you found this helpful, please consider following me on <a href=\"https://twitter.com/devodii_\"><strong>Twitter</strong></a>, reacting to this post, leaving a comment, or support me by buying me a coffee through this <a href=\"https://www.buymeacoffee.com/emmanuelod5\"><strong>link</strong></a><strong> </strong>(this motivates me to keep my articles free for everyone to\u00a0read).</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=39e4e669f7ff\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>The easiest way to build and launch a saas product in\u00a02023.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WsLzulox-m3YezXP7H1HeQ.png\"></figure><p>Developing a SaaS tool can be overwhelming with lots of boilerplate.</p>\n<p>If you don\u2019t have the all the time to set up boilerplate codes (e.g auth, DNS records, payment webhooks, etc), <br>Then, you need <a href=\"https://shipfa.st/?via=76b1ktxw7bbln9yvdrh9\">ShipFast</a>. Shipfast saves <strong>18+</strong> hrs of development headache\u00a0, it\u2019s trusted by 300+ devs and it has a very great documentation.</p>\n<p>If you\u2019re cool with developing every part of the application, then read on as I show you how to build and launch your <strong>waitlist.</strong></p>\n<p><strong>Prerequisites:</strong><br>- Must have a little development experience.</p>\n<p>As stated, we\u2019d be using next js with typescript and prisma in this\u00a0post.</p>\n<p>This isn\u2019t going to be a Next js tutorial. we\u2019re going to focus on the very important part of building and launching the application. <br>Feel free to check the documentation for <a href=\"https://nextjs.org/\">next js</a> and\u00a0<a href=\"https://prisma.io/\">prisma</a>.</p>\n<h3>Very important definitions</h3>\n<p><strong>What is PlanetScale? </strong><br>PlanetScale is a database-as-a-service platform that specializes in providing a scalable and highly available database solution for modern cloud-native applications. It is designed to simplify the management of databases, particularly those based on the <strong>MySQL</strong> open-source database system.<br><a href=\"https://planetscale.com/\">read\u00a0more</a></p>\n<p><strong>What is Prisma?<br></strong>Prisma is an open-source Object relational mapping library for modern web development. It allows developers write queries in Javascript/Typescript.</p>\n<p>Prisma offers some prouducts to developers. read more<br>Out of all those, we\u2019d be interested in 2 from all the product offers.<br>What are they?<br>- <a href=\"https://www.prisma.io/docs/concepts/components/prisma-client\">Prisma client</a>\u200a\u2014\u200aThis includes methods we consume from the libraries in order to send queries to our database.<br>- <a href=\"https://www.prisma.io/studio\">Prisma studio</a>\u200a\u2014\u200aA workspace where you see the data in your database.</p>\n<h3>Start here</h3>\n<p><strong>Create your database<br>- </strong>Open a browser and visit <a href=\"https:planetscale.com\">planetscale.co</a>m<br>- Sign up for a free account. (you get the ability to create one database for <strong>free</strong>)<br>- Create a database and select the closest region to your physical location. This will help reduce\u00a0latency</p>\n<p><strong>Setting up prisma<br></strong>If you have an existing Next js project, just skip this\u00a0step.</p>\n<p>To create a new Next js app, spin up a console and run the following command npx create-next-app@latest</p>\n<p>It asks you a few questions as pertaining the app, take your time to answer them and let the installation process\u00a0begin.</p>\n<p>Go, I\u2019d wait for you\u00a0\u2615\ufe0f</p>\n<p>Now, let\u2019s build a waitlist for our\u00a0product.</p>\n<p>Do the following when it\u2019s finished installing:<br>1. Create a basic form component</p>\n<p>I\u2019d provide a boilerplate for\u00a0this.</p>\n<pre>// components/form.tsx<br>import React, { useState } from \"react\";<br><br><br>export const Form = memo(({ onSubmit }) =&gt; {<br>  const [state, setState] = useState({<br>    name: null,<br>    email: null,<br>    request: null,<br>  });<br>  const handleInputChange = (field, value) =&gt; {<br>    setState((prev) =&gt; ({ ...prev, [field]: value }));<br>  };<br>  const handleSubmitForm = (e) =&gt; {<br>    e.preventDefault();<br>    const { name, email, request } = state<br>    const formData = { name, email, request};<br>    // Call the onSubmit function passed from the parent component<br>    handleSubmit(formData);<br>  };<br>  return (<br>    &lt;form onSubmit={handleSubmit}&gt;<br>      &lt;label htmlFor=\"name\"&gt;Name&lt;/label&gt;<br>      &lt;input<br>        value={state.name || \"\"}<br>        id=\"name\"<br>        onChange={(e) =&gt; handleInputChange(\"name\", e.target.value)}<br>      /&gt;<br>      &lt;label htmlFor=\"email\"&gt;Email&lt;/label&gt;<br>      &lt;input<br>        value={state.email || \"\"}<br>        id=\"email\"<br>        onChange={(e) =&gt; handleInputChange(\"email\", e.target.value)}<br>      /&gt;<br>      &lt;label htmlFor=\"request\"&gt;Request&lt;/label&gt;<br>      &lt;input<br>        value={state.request || \"\"}<br>        id=\"request\"<br>        onChange={(e) =&gt; handleInputChange(\"request\", e.target.value)}<br>      /&gt;<br>    &lt;button type='submit'&gt;submit&lt;/button&gt;<br>    &lt;/form&gt;<br>  );<br>};<br>)</pre>\n<p>2. Render it in your index.jsx file (<em>if you specified pages directory from installation</em>). OR page.jsx (<em>if you specified app directory from installation</em>)<br>3. Run npm run dev to start the local server and navigate to the URL your terminal suggests. It\u2019s usually on <a href=\"http://localhost/\"><strong>http://localhost:3000</strong>.</a></p>\n<p>Open a terminal again in the same directory and run npx prisma init to generate a prisma folder with all basic setup as well as a\u00a0<strong>.env </strong>file where we need to store our database credentials</p>\n<p>Move to the newly generated\u00a0<strong>.env </strong>file, you\u2019d see a varaible <strong>DATABASE_URL</strong> set to a string. Just leave it like that, we\u2019d get to it in a\u00a0bit.</p>\n<p><strong>Defining your schema<br></strong>Now, in your <strong>schema.prisma </strong>file inside of the <strong>prisma </strong>directory, update the datasource and client to the following</p>\n<pre>generator client {<br>  provider = \"prisma-client-js\"<br>  previewFeatures = [\"referentialIntegrity\"]<br>}<br></pre>\n<pre>datasource db {<br>  provider = \"mysql\"<br>  url = env(\"DATABASE_URL\")<br>  referentialIntegrity = \"prisma\"<br>}</pre>\n<p>PlanetScale doesn\u2019t support <strong>foreign key constraints</strong> as it\u2019s MySQL based, and Prisma defaults to expressing relations via foreign keys, we need to set this referentialIntegrity property when using Prisma with PlanetScale.</p>\n<p>Now, we need to create data models (<em>a.k.a</em> <em>entities</em>) In this case User (as we decided to build a simple waitlist). <br>The model will store the Users id\u00a0, name, email, request).</p>\n<pre>model User {<br>  id         @id @default(autoincrement())<br>  name       String<br>  email      String<br>  request    String<br>}</pre>\n<p>Now, we\u2019re almost set to preview the User table with <strong>prisma\u00a0studio</strong></p>\n<p><strong>Running migrations for the\u00a0schema</strong></p>\n<ol>\n<li>Go to your PlanetScale\u2019s dashboard, and copy the URL for the database you\u00a0created.</li>\n<li>Move to your\u00a0.env file and replace the value for DATABASE_URL with the one you have\u00a0copied.</li>\n<li>Open a terminal and run the following commandnpx prisma db push\u00a0. <br>Congratulations, We ran our first migration. (<em>This means that the User model defined in the</em><em>schema.prisma file got registered to our database as an\u00a0entity</em>)</li>\n<li>Now, we\u2019re set to view the User entity and the column it has. <br>\ud83e\udd14 How do I do this?<br>It\u2019s easy. just run this command from a terminal npx prisma studio and navigate to the URL your terminal suggests. It\u2019s usually on <a href=\"http://localhost:5555/\"><strong>http://localhost:5555/</strong></a>\n</li>\n</ol>\n<p><strong>Creating your API\u00a0routes</strong></p>\n<p>We\u2019re going to be using Nextjs\u2019 app router for this, which means all our components are automatically rendered on the server side. <a href=\"https://nextjs.org/docs/app\">learn\u00a0more</a></p>\n<p>In the example below, we\u2019d be creating a function that returns a user information by passing the email as an argument to the function.</p>\n<pre>// lib/utils<br>import { PrismaClient } from \"@/prisma/client\"<br><br>const prisma = new PrismaClient()<br>export const createUser = async (email, name, request) =&gt; {<br>  try {<br>    const user = await prisma.user.create({<br>      data: {<br>        email,<br>        name,<br>        request<br>      },<br>    });<br>    console.log('User created:', user);<br>  } catch (error) {<br>    console.error('Error creating user:', error);<br>  }<br>}<br><br>export const fetchUserWithEmail = async (email) =&gt; {<br>  return await prisma.user.findUnque({<br>     where: { email }<br>  })<br>}</pre>\n<p>There you go! <br>\ud83d\ude15 Typescript devs be like: How does prisma finds a user object during compile\u00a0time?</p>\n<p>It\u2019s simple, prisma has a generic function that registers any instantiated model. <br>You don\u2019t care. Right? just stay a consumer\u00a0\ud83d\ude06</p>\n<p><strong>Adding and consuming data from\u00a0Nextjs</strong></p>\n<p>We can now add a user to database from the Form component we already created in the previous section.<br>I\u2019d provide an example below. (<em>using Nextjs\u2019 app\u00a0router)</em></p>\n<pre>import { Form } from 'components/form'<br>import { createUser } from 'path-to-lib'<br><br>const Page = () =&gt; {<br>  const handleSubmit = useCallback( async (formdata) =&gt; {<br>       createUser(formData)<br>       console.log('User created sucessfully')<br>  }, [formData])<br>  return &lt;Form onSubmit={handleSubmit}/&gt;;<br>}<br>export default Page</pre>\n<p><strong>Get records from a\u00a0database</strong></p>\n<p>We can also use the return value of fetchAllUsers in a component to give discounts to users that joined the waitlist.</p>\n<pre>import { fetchUserWithEmail } from 'path-to-lib'<br>import { useEffect } from 'react'<br><br>useEffect(() =&gt; {<br>    fetchUserWithEmail(email)<br>      .then((user) =&gt; setDiscount(user?.hasDiscount || false))<br>      .catch((error) =&gt; {<br>        console.error(\"Error fetching user\", error);<br>      });<br>  }, [email]);<br>  return (<br>    &lt;section&gt;<br>      { discount<br>          ? (&lt;div&gt;has discount :)&lt;/div&gt;)<br>          : (&lt;div&gt;no discount :(&lt;/div&gt;)<br>       }<br>    &lt;/section&gt;<br>);<br>}</pre>\n<p><strong>Deployments</strong></p>\n<p>Now, we\u2019re ready to deploy our application using\u00a0<strong>vercel</strong></p>\n<p>Follow this\u00a0steps</p>\n<ul>\n<li>Create a github repository and push your code to the repository</li>\n<li>Open a browser and visit <a href=\"https://vercel.com/\">vercel.com</a>\n</li>\n<li>Sign up for a free\u00a0accont</li>\n<li>Go to your dashboard and upload the git repository where your code lives\u00a0in</li>\n<li>Add the environment variables that your app depends on. In our case, it\u2019s DATABASE_URL, also add the value for it in the appropriate field. (<em>No fear, the value will be encrypted)</em>\n</li>\n<li>Just click the deploy button and allow it run the build command automatically.</li>\n</ul>\n<p><strong>\ud83c\udf89 Congratulations!!</strong> You\u2019ve just shipped the waitlist for your\u00a0SaaS.</p>\n<h3>Conclusion</h3>\n<p>If you got up to this point, congratulations again. You\u2019re definetly upto something \ud83d\ude09</p>\n<p>And If you won\u2019t have the time to set up these boilerplate codes, then i recommend you use <a href=\"https://shipfa.st/?via=76b1ktxw7bbln9yvdrh9\">ShipFast</a>. It\u2019s helped me and other devs built faster with ready-made templates for Auth, Mails, UI Components, DNS Records, Payment Webhooks, etc.</p>\n<p>Lastly, if you found this helpful, please consider following me on <a href=\"https://twitter.com/devodii_\"><strong>Twitter</strong></a>, reacting to this post, leaving a comment, or support me by buying me a coffee through this <a href=\"https://www.buymeacoffee.com/emmanuelod5\"><strong>link</strong></a><strong> </strong>(this motivates me to keep my articles free for everyone to\u00a0read).</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=39e4e669f7ff\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["nextjs","programming","saas","launch","marketing"]},{"title":"Understanding the Factory method design pattern","pubDate":"2023-08-09 16:23:59","link":"https://medium.com/@emmanuelodii80/understanding-the-factory-method-design-pattern-cf1ea0d48d66?source=rss-6bf89630698b------2","guid":"https://medium.com/p/cf1ea0d48d66","author":"Emmanuel Odii","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*TR1DG9qQmY9G99T8CdlnRA.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TR1DG9qQmY9G99T8CdlnRA.png\"><figcaption>\u201cA design that doesn\u2019t take change into account risks<strong> </strong>major redesign in the future\u201d\u200a\u2014\u200aErich\u00a0Gamma</figcaption></figure><p>We write code, irrespective of the languages we work in, thinking it\u2019s just enough to put things up on the screen. When working with organizations, we may never worry too much about design patterns because other developers take that upon themselves. Instead, you only need to follow the patterns that are already in\u00a0place.</p>\n<p>Today, we\u2019re going to discuss one of my favorite <strong>creational </strong>design patterns called the <strong>Factory\u00a0Method</strong>.</p>\n<p><strong>What is Factory Method? </strong>Factory method is a <strong>creational </strong>design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be\u00a0created.</p>\n<p>\ud83d\ude28 What does that mean?<br>1. It\u2019s purpose is to manage the creation of object <br>2. It has a superclass (often called the creator) that provides a method that serves an an interface for creating objects. <br>3. After the method is being created from the superclass, each subclass can override the method to create different type of objects that suits its requirement</p>\n<p>\ud83d\udca1 We need to discuss an important aspect of this pattern, which is the client code.<br>What is <strong>client code?\u00a0: </strong>the client code is the code that uses objects or services provided by other classes or components. It\u2019s the code that invokes methods, creates objects, and interacts with different parts of the software to achieve a specific task or functionality</p>\n<p>\ud83d\ude2b Still seems difficult? Just keep reading, it\u2019d get too clear in a bit.\u00a0\ud83d\ude4f</p>\n<p>Why use the Factory design pattern?<br>1. F<strong>lexibility</strong>: Different subclasses can create different types of objects without altering the client code.<br>2. <strong>Code Maintenance</strong>: Changes to object creation logic are isolated within the respective subclasses, minimizing impact on the rest of the codebase.</p>\n<p>Let\u2019s discuss a real world\u00a0problem</p>\n<p><strong>Problem:</strong><br>Imagine you\u2019re managing a popular pizza \ud83c\udf55 restaurant chain. The first version of your shop only makes one type of pizza (<strong>Cheese pizza</strong>). So, you define a process for creating <strong>Cheese Pizza</strong>(s) for any order you\u00a0receive.</p>\n<p>Soon, customers start to order <strong>Pepperoni pizza</strong>. The process becomes too tedious for you, as you have to duplicate and edit the procedure used for creating <strong>Cheese pizza</strong>. You become worried about losing customers, especially since your restaurant is very popular. You need a process that allows you to adapt to any new order in less than 5 minutes (yes!\u00a0\ud83d\ude06).</p>\n<p><strong>Solution</strong>: <br>To tackle the challenges posed by adapting to new pizza orders while maintaining efficiency, the Factory Method design pattern comes to the rescue. The Factory Method pattern allows us to define a flexible and consistent process for creating various types of pizzas without duplicating code.</p>\n<p>In this scenario, the Factory Method pattern would involve defining a common interface or base class for all pizza types (like <strong>Cheese Pizza</strong> and <strong>Pepperoni Pizza</strong>), which would include methods like prepare(), bake(), cut(), and box(). Each pizza type would implement these methods differently according to its unique requirements.</p>\n<p><strong>How do I do\u00a0this?</strong></p>\n<p>\ud83d\ude1f I just remembered, I haven\u2019t written any lines of code since. I guess it\u2019s the right time to write a program that solves this problem. First, we can start by either creating the base class using Abstract classes, which makes things cleaner, OR using Interfaces (lengthy code). I\u2019d try to be beginner-friendly, so let\u2019s use Interfaces.</p>\n<pre>// Step 1: Define Pizza Types<br>interface Pizza {<br>  prepare(): void;<br>  bake(): void;<br>  cut(): void;<br>  box(): void;<br>}</pre>\n<pre>// Step 2: Use the interface defined to create diffrent pizza<br>class CheesePizza implements Pizza {<br>  prepare() { return console.log(\"Preparing a new CheesePizza...\")}<br>  bake() { return console.log(\"Baking the prepared CheesePizza...\") }<br>  cut() { return console.log(\"Cutting the newly baked CheesePizza\") }<br>  box() { return console.log(\"Packaging the CheesePizza for the customer\")}<br>}<br><br>class PepperoniPizza implements Pizza {<br>  prepare() { return console.log(\"Preparing a new PepperoniPizza...\")}<br>  bake() { return console.log(\"Baking the prepared PepperoniPizza...\") }<br>  cut() { return console.log(\"Cutting the newly baked PepperoniPizza\") }<br>  box() { return console.log(\"Packaging the PepperoniPizza for the customer\")}<br>}<br><br>class MargheritaPizza implements Pizza {<br>  prepare() { return console.log(\"Preparing a new MargheritaPizza...\")}<br>  bake() { return console.log(\"Baking the prepared MargheritaPizza...\") }<br>  cut() { return console.log(\"Cutting the newly baked MargheritaPizza\") }<br>  box() { return console.log(\"Packaging the MargheritaPizza for the customer\")}<br>}</pre>\n<p>Next, we define the creators and the what it should\u00a0do.</p>\n<pre>// Step 3: Define the Creator's type, each method must return a Pizza object. remember?<br>interface PizzaFactory: {<br>  createPizza: Pizza<br>}<br><br>// Step 4: Implement Concrete Creators. <br><br>// This is a factory of CheesePizza'<br>class CheesePizzaFactory implements PizzaFactory {<br>  createPizza() {<br>    return new CheesePizza();<br>  }<br>}<br><br>// This is a factory of PepperoniPizza'<br>class PepperoniPizzaFactory implements PizzaFactory {<br>  createPizza() {<br>    return new PepperoniPizza();<br>  }<br>}<br><br>// This is a factory of MargheritaPizza'<br>class MargheritaPizzaFactory implements PizzaFactory {<br>  createPizza() {<br>    return new MargheritaPizza();<br>  }<br>}<br></pre>\n<pre><br>// Step 4: Client Code<br>function orderPizza(pizzaType: string) {<br>  let pizza: Pizza;<br><br>// if a customer wants any available Pizza, we simply call from the factory<br>  if (pizzaType === 'Margherita') {<br>    const margheritaFactory = new MargheritaPizzaFactory();<br>    pizza = margheritaFactory.createPizza();<br>  } else if (pizzaType === 'Pepperoni') {<br>    const pepperoniFactory = new PepperoniPizzaFactory();<br>    pizza = pepperoniFactory.createPizza();<br>  } else {<br>    throw new Error('Invalid pizza type');<br>  }<br><br>// Now, we expect each PizzaFactory to return the methods used in creating it.<br><br>  pizza.prepare();<br>  pizza.bake();<br>  pizza.cut();<br>  pizza.box();<br>  return pizza;<br>}</pre>\n<pre>// Step 5: Usage<br>const margheritaPizza = orderPizza('Margherita');<br>const pepperoniPizza = orderPizza('Pepperoni');</pre>\n<p>With Factory Methods, we can manage our pizza restaurant in the most scalable and efficient way</p>\n<p>If you enjoyed reading this article and found it helpful in understanding the Factory Method design pattern, I\u2019d be thrilled if you could show your support in a fun and delicious way. Consider <a href=\"https://buy.stripe.com/bIY6pl8kY4xFdHydQS\">buying me a pizza</a>\u200a\u2014\u200ait\u2019s like a slice of appreciation for the effort that went into creating this content and making it free for everyone! Your generosity would mean a lot to\u00a0me.</p>\n<p>If you missed the pizza link, it\u2019s\u00a0<a href=\"https://buy.stripe.com/bIY6pl8kY4xFdHydQS\">here</a>.</p>\n<p>Stay curious and keep coding!\u00a0\ud83c\udf55\ud83d\ude80</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cf1ea0d48d66\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TR1DG9qQmY9G99T8CdlnRA.png\"><figcaption>\u201cA design that doesn\u2019t take change into account risks<strong> </strong>major redesign in the future\u201d\u200a\u2014\u200aErich\u00a0Gamma</figcaption></figure><p>We write code, irrespective of the languages we work in, thinking it\u2019s just enough to put things up on the screen. When working with organizations, we may never worry too much about design patterns because other developers take that upon themselves. Instead, you only need to follow the patterns that are already in\u00a0place.</p>\n<p>Today, we\u2019re going to discuss one of my favorite <strong>creational </strong>design patterns called the <strong>Factory\u00a0Method</strong>.</p>\n<p><strong>What is Factory Method? </strong>Factory method is a <strong>creational </strong>design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be\u00a0created.</p>\n<p>\ud83d\ude28 What does that mean?<br>1. It\u2019s purpose is to manage the creation of object <br>2. It has a superclass (often called the creator) that provides a method that serves an an interface for creating objects. <br>3. After the method is being created from the superclass, each subclass can override the method to create different type of objects that suits its requirement</p>\n<p>\ud83d\udca1 We need to discuss an important aspect of this pattern, which is the client code.<br>What is <strong>client code?\u00a0: </strong>the client code is the code that uses objects or services provided by other classes or components. It\u2019s the code that invokes methods, creates objects, and interacts with different parts of the software to achieve a specific task or functionality</p>\n<p>\ud83d\ude2b Still seems difficult? Just keep reading, it\u2019d get too clear in a bit.\u00a0\ud83d\ude4f</p>\n<p>Why use the Factory design pattern?<br>1. F<strong>lexibility</strong>: Different subclasses can create different types of objects without altering the client code.<br>2. <strong>Code Maintenance</strong>: Changes to object creation logic are isolated within the respective subclasses, minimizing impact on the rest of the codebase.</p>\n<p>Let\u2019s discuss a real world\u00a0problem</p>\n<p><strong>Problem:</strong><br>Imagine you\u2019re managing a popular pizza \ud83c\udf55 restaurant chain. The first version of your shop only makes one type of pizza (<strong>Cheese pizza</strong>). So, you define a process for creating <strong>Cheese Pizza</strong>(s) for any order you\u00a0receive.</p>\n<p>Soon, customers start to order <strong>Pepperoni pizza</strong>. The process becomes too tedious for you, as you have to duplicate and edit the procedure used for creating <strong>Cheese pizza</strong>. You become worried about losing customers, especially since your restaurant is very popular. You need a process that allows you to adapt to any new order in less than 5 minutes (yes!\u00a0\ud83d\ude06).</p>\n<p><strong>Solution</strong>: <br>To tackle the challenges posed by adapting to new pizza orders while maintaining efficiency, the Factory Method design pattern comes to the rescue. The Factory Method pattern allows us to define a flexible and consistent process for creating various types of pizzas without duplicating code.</p>\n<p>In this scenario, the Factory Method pattern would involve defining a common interface or base class for all pizza types (like <strong>Cheese Pizza</strong> and <strong>Pepperoni Pizza</strong>), which would include methods like prepare(), bake(), cut(), and box(). Each pizza type would implement these methods differently according to its unique requirements.</p>\n<p><strong>How do I do\u00a0this?</strong></p>\n<p>\ud83d\ude1f I just remembered, I haven\u2019t written any lines of code since. I guess it\u2019s the right time to write a program that solves this problem. First, we can start by either creating the base class using Abstract classes, which makes things cleaner, OR using Interfaces (lengthy code). I\u2019d try to be beginner-friendly, so let\u2019s use Interfaces.</p>\n<pre>// Step 1: Define Pizza Types<br>interface Pizza {<br>  prepare(): void;<br>  bake(): void;<br>  cut(): void;<br>  box(): void;<br>}</pre>\n<pre>// Step 2: Use the interface defined to create diffrent pizza<br>class CheesePizza implements Pizza {<br>  prepare() { return console.log(\"Preparing a new CheesePizza...\")}<br>  bake() { return console.log(\"Baking the prepared CheesePizza...\") }<br>  cut() { return console.log(\"Cutting the newly baked CheesePizza\") }<br>  box() { return console.log(\"Packaging the CheesePizza for the customer\")}<br>}<br><br>class PepperoniPizza implements Pizza {<br>  prepare() { return console.log(\"Preparing a new PepperoniPizza...\")}<br>  bake() { return console.log(\"Baking the prepared PepperoniPizza...\") }<br>  cut() { return console.log(\"Cutting the newly baked PepperoniPizza\") }<br>  box() { return console.log(\"Packaging the PepperoniPizza for the customer\")}<br>}<br><br>class MargheritaPizza implements Pizza {<br>  prepare() { return console.log(\"Preparing a new MargheritaPizza...\")}<br>  bake() { return console.log(\"Baking the prepared MargheritaPizza...\") }<br>  cut() { return console.log(\"Cutting the newly baked MargheritaPizza\") }<br>  box() { return console.log(\"Packaging the MargheritaPizza for the customer\")}<br>}</pre>\n<p>Next, we define the creators and the what it should\u00a0do.</p>\n<pre>// Step 3: Define the Creator's type, each method must return a Pizza object. remember?<br>interface PizzaFactory: {<br>  createPizza: Pizza<br>}<br><br>// Step 4: Implement Concrete Creators. <br><br>// This is a factory of CheesePizza'<br>class CheesePizzaFactory implements PizzaFactory {<br>  createPizza() {<br>    return new CheesePizza();<br>  }<br>}<br><br>// This is a factory of PepperoniPizza'<br>class PepperoniPizzaFactory implements PizzaFactory {<br>  createPizza() {<br>    return new PepperoniPizza();<br>  }<br>}<br><br>// This is a factory of MargheritaPizza'<br>class MargheritaPizzaFactory implements PizzaFactory {<br>  createPizza() {<br>    return new MargheritaPizza();<br>  }<br>}<br></pre>\n<pre><br>// Step 4: Client Code<br>function orderPizza(pizzaType: string) {<br>  let pizza: Pizza;<br><br>// if a customer wants any available Pizza, we simply call from the factory<br>  if (pizzaType === 'Margherita') {<br>    const margheritaFactory = new MargheritaPizzaFactory();<br>    pizza = margheritaFactory.createPizza();<br>  } else if (pizzaType === 'Pepperoni') {<br>    const pepperoniFactory = new PepperoniPizzaFactory();<br>    pizza = pepperoniFactory.createPizza();<br>  } else {<br>    throw new Error('Invalid pizza type');<br>  }<br><br>// Now, we expect each PizzaFactory to return the methods used in creating it.<br><br>  pizza.prepare();<br>  pizza.bake();<br>  pizza.cut();<br>  pizza.box();<br>  return pizza;<br>}</pre>\n<pre>// Step 5: Usage<br>const margheritaPizza = orderPizza('Margherita');<br>const pepperoniPizza = orderPizza('Pepperoni');</pre>\n<p>With Factory Methods, we can manage our pizza restaurant in the most scalable and efficient way</p>\n<p>If you enjoyed reading this article and found it helpful in understanding the Factory Method design pattern, I\u2019d be thrilled if you could show your support in a fun and delicious way. Consider <a href=\"https://buy.stripe.com/bIY6pl8kY4xFdHydQS\">buying me a pizza</a>\u200a\u2014\u200ait\u2019s like a slice of appreciation for the effort that went into creating this content and making it free for everyone! Your generosity would mean a lot to\u00a0me.</p>\n<p>If you missed the pizza link, it\u2019s\u00a0<a href=\"https://buy.stripe.com/bIY6pl8kY4xFdHydQS\">here</a>.</p>\n<p>Stay curious and keep coding!\u00a0\ud83c\udf55\ud83d\ude80</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cf1ea0d48d66\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["design","typescript","code","patterns","pizza"]},{"title":"Elevate Your Skills: Empower Your React App with React-Router-Dom State Lifting!","pubDate":"2023-06-04 18:17:11","link":"https://medium.com/@emmanuelodii80/elevate-your-skills-empower-your-react-app-with-react-router-dom-state-lifting-e04f508f1220?source=rss-6bf89630698b------2","guid":"https://medium.com/p/e04f508f1220","author":"Emmanuel Odii","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*wNKnPGFpAFYnbyQZludH9g.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wNKnPGFpAFYnbyQZludH9g.jpeg\"></figure><p><strong>Understanding React states</strong>: A state is an object that represents the current state of a component. It holds data that can change over time, and it determines the behavior and rendering of the component. When a state is updated, React automatically re-renders the component to reflect the changes.<br>Here\u2019s a code snippet to illustrate this:</p>\n<pre>import { useState } from \"react\"<br><br>export function App () {<br>    const [count, setCount] = useState(0);<br>    const handleAdd = () =&gt; setCount(prev =&gt; prev + 1)<br>    return (<br>        &lt;div&gt;Count is { count } &lt;/div&gt;<br>        &lt;button onClick={handleAdd}&gt;Increment&lt;/button&gt;<br>    );<br>}</pre>\n<p>I have defined a basic count function with a button that increments the count state by one(1) each time it is clicked using the current state version and the updated version.<br>It is assumed that you now understand how React states work as we would delve deeper to see how we can move states to the\u00a0<strong>URL</strong>.</p>\n<h3>Why Move states to\u00a0URL?</h3>\n<p>For instance, we intend to build an e-commerce website using react js. We then intend to store all information about our website in the state\u00a0:(<br>This isn\u2019t ideal as a product URL isn\u2019t supposed to be stored in a state. But <strong>Why?</strong><br>Remember, the state lives in the user\u2019s device and is not accessible elsewhere. This will reduce our monetization rate as users can\u2019t share products with friends since it\u2019s all hard-coded in the state.<br>This becomes a good time to move states to the <strong>URL</strong> so that it is accessible by anyone and can be shared.\u00a0\ud83d\ude0a</p>\n<p><strong>This is to\u00a0say:</strong></p>\n<ul>\n<li>\n<strong>URL</strong> parameters can be bookmarked and\u00a0shared</li>\n<li>It improves User Experience by allowing users to navigate back and forth in a very convenient way.</li>\n</ul>\n<p>Now, I can achieve this using React-Router. As this write-up isn\u2019t about React-Router, so I won\u2019t spend much time talking about it. You can check the <a href=\"https://reactrouter.com/en/main\">documentation</a> to learn more.<br>As usual, every library exports custom hooks to help carry out certain tasks in our application. react-router exported a custom <strong>useSearchParam</strong> hook.</p>\n<p><strong>The useSearchParam Hook:</strong> The useSearchParam hook is a simple way to read and update URL search parameters in a React component, making it easy to create bookmarkable and shareable links. It creates an instance o the browser's native URL so, it has so many methods that can fit in the requirement of your application.<br>This works with query parameters, it is denoted with the\u00a0? symbol.<br>Here's an example of how it is seen: https://shopify/sneakers?size=34\u00a0. The URL simply describes the path to a sneakers page with size=34 on\u00a0Shopify.</p>\n<h3>Setting up our Application:</h3>\n<p>Assume you have a template with a list of all products, Let\u2019s delve into implementing Products with Sort functionality built-in state <strong>vs</strong>\u00a0URL.</p>\n<p>How we can achieve this by storing in the\u00a0state:</p>\n<ul>\n<li>create a component that accepts all global products as a prop to display the list of found\u00a0products</li>\n<li>create an object to store the filtered\u00a0products</li>\n<li>Carry out some product filtering by\u00a0name.</li>\n<li>render the filtered product to the\u00a0user</li>\n</ul>\n<pre>import { useState } from \"react\"<br><br>export const productLists = (products) =&gt; {<br>    const [foundProduct, setFoundProduct] = useState([]);<br>    const [inputValue, setInputValue] = useState(null)<br><br>    const findByName = () =&gt; { <br>        const filteredProducts = products ? products<br>       .filter(product =&gt; product.name.includes(inputValue.toLowerCase()))<br>             : null<br><br>        setFoundProduct(filteredProducts)<br>    }<br><br>    const AvailableProducts = foundProducts.map(newProduct=&gt; (<br>        &lt;div key={newProduct.id}&gt;<br>            &lt;h2&gt;{ newProduct.name} &lt;/h2&gt;<br>            &lt;span&gt;{newProduct.price}&lt;/span&gt;<br>            &lt;article&gt;{newProduct.description}&lt;/article&gt;<br>        &lt;/div&gt;<br>   ))<br><br>    return (<br>        &lt;&gt;<br>           &lt;div&gt;<br>                &lt;p&gt;Search for a product &lt;/p&gt;<br>                &lt;input<br>                     val={inputValue}<br>                     onChange={e =&gt; setInputValue(e.target.value)}<br>                 /&gt;<br>                &lt;button role=\"search\" onClick={findByName}&gt;Search&lt;/button&gt;<br>           &lt;/div&gt;<br><br><br>        &lt;h1&gt;Available product from your input&lt;/h1&gt;<br>         &lt;section&gt;{AvailabeProducts}&lt;/section&gt;<br>        &lt;/&gt;<br>    );<br><br>}</pre>\n<p>Now, we understand this isn\u2019t efficient as the user might wish to share that sorted product with their friends. This becomes impossible as states live in a browser only.<br>Let\u2019s refactor this using the <strong>useSearchParam</strong> hook from react-router-dom to improve the user experience a\u00a0bit.</p>\n<ul>\n<li>import and use the useSearchParam hook from react-router-dom</li>\n<li>store the current browser URL in a\u00a0variable</li>\n<li>and use the get method to get the variable of the products name (Maybe price or something.</li>\n<li>filter based on the value of the variable. Here, I\u2019ve used the name to\u00a0filter</li>\n<li>loop through the filtered array and return the appropriate Markup.</li>\n</ul>\n<pre>import { useState, useRef } from \"react\"<br>import { useSearchParam } from \"react-router-dom\"<br><br>export const productLists = (products) =&gt; {<br>   const [inputValue, setInputValue] = useState();<br>  const [searchParam, setSearchParam] = useSearchParam();<br>  const nameFilter = searchParam.get('name') <br><br>   const filteredProducts = products ? products<br>      .filter(product =&gt; product.name === nameFilter))<br>            : null<br><br>    const AvailableProducts = filteredProducts.map(newProduct=&gt; (<br>        &lt;div key={newProduct.id}&gt;<br>            &lt;h2&gt;{ newProduct.name} &lt;/h2&gt;<br>            &lt;span&gt;{newProduct.price}&lt;/span&gt;<br>            &lt;article&gt;{newProduct.description}&lt;/article&gt;<br>        &lt;/div&gt;<br>   ))<br><br>    return (<br>        &lt;&gt;<br>           &lt;div&gt;<br>                &lt;p&gt;Search for a product &lt;/p&gt;<br>                &lt;input<br>                     val={inputValue}<br>                     onChange={e =&gt; setInputValue(e.target.value)}<br>                 /&gt;<br>                &lt;button role=\"search\" <br>                    onClick={() =&gt; setSearchParam({name: inputValue)}<br>                &gt;Search&lt;/button&gt;<br>           &lt;/div&gt;<br><br><br>        &lt;h1&gt;Available product from your input&lt;/h1&gt;<br>         &lt;section&gt;{AvailabeProducts}&lt;/section&gt;<br>        &lt;/&gt;<br>    );<br><br>}</pre>\n<p>And, that\u2019s how to lift state to URL at the <strong>basic</strong> level. You can refer to the react-router <a href=\"https://reactrouter.com/en/main\">docs</a>.</p>\n<p>If you found this helpful, please consider following me on <a href=\"https://twitter.com/devodii_\"><strong>Twitter</strong></a>, giving it a like, leaving a comment, or supporting me by buying me a coffee through this\u00a0<a href=\"https://www.buymeacoffee.com/emmanuelod5\"><strong>link</strong></a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e04f508f1220\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wNKnPGFpAFYnbyQZludH9g.jpeg\"></figure><p><strong>Understanding React states</strong>: A state is an object that represents the current state of a component. It holds data that can change over time, and it determines the behavior and rendering of the component. When a state is updated, React automatically re-renders the component to reflect the changes.<br>Here\u2019s a code snippet to illustrate this:</p>\n<pre>import { useState } from \"react\"<br><br>export function App () {<br>    const [count, setCount] = useState(0);<br>    const handleAdd = () =&gt; setCount(prev =&gt; prev + 1)<br>    return (<br>        &lt;div&gt;Count is { count } &lt;/div&gt;<br>        &lt;button onClick={handleAdd}&gt;Increment&lt;/button&gt;<br>    );<br>}</pre>\n<p>I have defined a basic count function with a button that increments the count state by one(1) each time it is clicked using the current state version and the updated version.<br>It is assumed that you now understand how React states work as we would delve deeper to see how we can move states to the\u00a0<strong>URL</strong>.</p>\n<h3>Why Move states to\u00a0URL?</h3>\n<p>For instance, we intend to build an e-commerce website using react js. We then intend to store all information about our website in the state\u00a0:(<br>This isn\u2019t ideal as a product URL isn\u2019t supposed to be stored in a state. But <strong>Why?</strong><br>Remember, the state lives in the user\u2019s device and is not accessible elsewhere. This will reduce our monetization rate as users can\u2019t share products with friends since it\u2019s all hard-coded in the state.<br>This becomes a good time to move states to the <strong>URL</strong> so that it is accessible by anyone and can be shared.\u00a0\ud83d\ude0a</p>\n<p><strong>This is to\u00a0say:</strong></p>\n<ul>\n<li>\n<strong>URL</strong> parameters can be bookmarked and\u00a0shared</li>\n<li>It improves User Experience by allowing users to navigate back and forth in a very convenient way.</li>\n</ul>\n<p>Now, I can achieve this using React-Router. As this write-up isn\u2019t about React-Router, so I won\u2019t spend much time talking about it. You can check the <a href=\"https://reactrouter.com/en/main\">documentation</a> to learn more.<br>As usual, every library exports custom hooks to help carry out certain tasks in our application. react-router exported a custom <strong>useSearchParam</strong> hook.</p>\n<p><strong>The useSearchParam Hook:</strong> The useSearchParam hook is a simple way to read and update URL search parameters in a React component, making it easy to create bookmarkable and shareable links. It creates an instance o the browser's native URL so, it has so many methods that can fit in the requirement of your application.<br>This works with query parameters, it is denoted with the\u00a0? symbol.<br>Here's an example of how it is seen: https://shopify/sneakers?size=34\u00a0. The URL simply describes the path to a sneakers page with size=34 on\u00a0Shopify.</p>\n<h3>Setting up our Application:</h3>\n<p>Assume you have a template with a list of all products, Let\u2019s delve into implementing Products with Sort functionality built-in state <strong>vs</strong>\u00a0URL.</p>\n<p>How we can achieve this by storing in the\u00a0state:</p>\n<ul>\n<li>create a component that accepts all global products as a prop to display the list of found\u00a0products</li>\n<li>create an object to store the filtered\u00a0products</li>\n<li>Carry out some product filtering by\u00a0name.</li>\n<li>render the filtered product to the\u00a0user</li>\n</ul>\n<pre>import { useState } from \"react\"<br><br>export const productLists = (products) =&gt; {<br>    const [foundProduct, setFoundProduct] = useState([]);<br>    const [inputValue, setInputValue] = useState(null)<br><br>    const findByName = () =&gt; { <br>        const filteredProducts = products ? products<br>       .filter(product =&gt; product.name.includes(inputValue.toLowerCase()))<br>             : null<br><br>        setFoundProduct(filteredProducts)<br>    }<br><br>    const AvailableProducts = foundProducts.map(newProduct=&gt; (<br>        &lt;div key={newProduct.id}&gt;<br>            &lt;h2&gt;{ newProduct.name} &lt;/h2&gt;<br>            &lt;span&gt;{newProduct.price}&lt;/span&gt;<br>            &lt;article&gt;{newProduct.description}&lt;/article&gt;<br>        &lt;/div&gt;<br>   ))<br><br>    return (<br>        &lt;&gt;<br>           &lt;div&gt;<br>                &lt;p&gt;Search for a product &lt;/p&gt;<br>                &lt;input<br>                     val={inputValue}<br>                     onChange={e =&gt; setInputValue(e.target.value)}<br>                 /&gt;<br>                &lt;button role=\"search\" onClick={findByName}&gt;Search&lt;/button&gt;<br>           &lt;/div&gt;<br><br><br>        &lt;h1&gt;Available product from your input&lt;/h1&gt;<br>         &lt;section&gt;{AvailabeProducts}&lt;/section&gt;<br>        &lt;/&gt;<br>    );<br><br>}</pre>\n<p>Now, we understand this isn\u2019t efficient as the user might wish to share that sorted product with their friends. This becomes impossible as states live in a browser only.<br>Let\u2019s refactor this using the <strong>useSearchParam</strong> hook from react-router-dom to improve the user experience a\u00a0bit.</p>\n<ul>\n<li>import and use the useSearchParam hook from react-router-dom</li>\n<li>store the current browser URL in a\u00a0variable</li>\n<li>and use the get method to get the variable of the products name (Maybe price or something.</li>\n<li>filter based on the value of the variable. Here, I\u2019ve used the name to\u00a0filter</li>\n<li>loop through the filtered array and return the appropriate Markup.</li>\n</ul>\n<pre>import { useState, useRef } from \"react\"<br>import { useSearchParam } from \"react-router-dom\"<br><br>export const productLists = (products) =&gt; {<br>   const [inputValue, setInputValue] = useState();<br>  const [searchParam, setSearchParam] = useSearchParam();<br>  const nameFilter = searchParam.get('name') <br><br>   const filteredProducts = products ? products<br>      .filter(product =&gt; product.name === nameFilter))<br>            : null<br><br>    const AvailableProducts = filteredProducts.map(newProduct=&gt; (<br>        &lt;div key={newProduct.id}&gt;<br>            &lt;h2&gt;{ newProduct.name} &lt;/h2&gt;<br>            &lt;span&gt;{newProduct.price}&lt;/span&gt;<br>            &lt;article&gt;{newProduct.description}&lt;/article&gt;<br>        &lt;/div&gt;<br>   ))<br><br>    return (<br>        &lt;&gt;<br>           &lt;div&gt;<br>                &lt;p&gt;Search for a product &lt;/p&gt;<br>                &lt;input<br>                     val={inputValue}<br>                     onChange={e =&gt; setInputValue(e.target.value)}<br>                 /&gt;<br>                &lt;button role=\"search\" <br>                    onClick={() =&gt; setSearchParam({name: inputValue)}<br>                &gt;Search&lt;/button&gt;<br>           &lt;/div&gt;<br><br><br>        &lt;h1&gt;Available product from your input&lt;/h1&gt;<br>         &lt;section&gt;{AvailabeProducts}&lt;/section&gt;<br>        &lt;/&gt;<br>    );<br><br>}</pre>\n<p>And, that\u2019s how to lift state to URL at the <strong>basic</strong> level. You can refer to the react-router <a href=\"https://reactrouter.com/en/main\">docs</a>.</p>\n<p>If you found this helpful, please consider following me on <a href=\"https://twitter.com/devodii_\"><strong>Twitter</strong></a>, giving it a like, leaving a comment, or supporting me by buying me a coffee through this\u00a0<a href=\"https://www.buymeacoffee.com/emmanuelod5\"><strong>link</strong></a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e04f508f1220\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["typescript","javascript","react-router","react-router-dom","react"]},{"title":"Bye-bye useState &amp; useEffect: Revolutionizing React Development!","pubDate":"2023-05-16 15:09:34","link":"https://medium.com/@emmanuelodii80/bye-bye-usestate-useeffect-revolutionizing-react-development-d91f95891adb?source=rss-6bf89630698b------2","guid":"https://medium.com/p/d91f95891adb","author":"Emmanuel Odii","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*lA-_v4GToxBmh1v7D7xk3A.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lA-_v4GToxBmh1v7D7xk3A.jpeg\"></figure><p><strong>Thank you to our sponsors who keep my articles\u00a0free:</strong></p>\n<p>If you\u2019re building a SaaS, AI tool or any other web app, and you don\u2019t have the all the time to set up boilerplate codes (e.g auth, DNS records, payment webhooks, components, animation, etc),<br>Then, you need <a href=\"https://shipfa.st/?via=76b1ktxw7bbln9yvdrh9\">ShipFast</a>. Shipfast saves 18+ hrs of development headache\u00a0, it\u2019s trusted by 300+ devs and it has a very great documentation.</p>\n<p>Today, I want to show you an alternative for the <strong>useState</strong> and <strong>useEffect</strong> hook in React. (<em>It reduces a lot of boilerplate codes)</em></p>\n<p>Many developers continue to use the useState and useEffect hooks to update states, but I have not been fond of this approach. The issue is that it causes the component to mount, remount, and unmount simultaneously, leading to unexpected behavior. As a result, when logging something into the console, you may see the result repeated three\u00a0times.</p>\n<h3>Introducing the useLoaderData Hook:</h3>\n<p>The useLoaderData hook is a custom hook in React that helps you load data into your component. It simplifies the process of fetching data from an API or performing any asynchronous operation.</p>\n<p>When you use the useLoaderData hook, you provide it with a function that returns a Promise. This Promise represents an asynchronous operation that will fetch the data you need. Once the Promise resolves, the data becomes available to your component.</p>\n<p>The useLoaderData hook handles the loading state for you, so you don't need to manually track whether the data is still loading or if it has finished loading. It provides you with a convenient way to access the data and also handles any potential errors that might occur during the data loading\u00a0process.</p>\n<p>By using the useLoaderData hook, you can keep your component code clean and organized, separating the data-loading logic from the rest of your component's responsibilities. It allows you to easily fetch and manage data in a more beginner-friendly way.</p>\n<h3>Why the useLoaderHook?</h3>\n<p>The useLoaderHook from react-router helps achieve the same functionality with minimal effort. These are some examples of why you should use\u00a0it.</p>\n<ul>\n<li>\n<strong>Loading state management</strong>: Loaders handle the loading state for you, providing a clear indication of when data is being fetched. This helps you manage loading spinners, progress indicators, or any other UI elements related to data\u00a0loading.</li>\n<li>\n<strong>Error handling</strong>: Loaders often include error handling mechanisms, allowing you to handle and display errors that occur during the data loading process. They provide a standardized way to handle errors, making it easier to implement consistent error handling across your application.</li>\n<li>\n<strong>Separation of concerns</strong>: Loaders allow you to separate the data loading logic from other aspects of your component. This promotes better code organization and maintainability, as you can focus on specific responsibilities without mixing\u00a0them.</li>\n</ul>\n<p>And lots\u00a0more.</p>\n<h3>Let\u2019s see How This\u00a0Works.</h3>\n<p>It\u2019s assumed that you have a good knowledge of how react-router 6 works. If you don\u2019t, Feel free to check out the docs\u00a0<a href=\"https://reactrouter.com/en/main\">here</a></p>\n<p>Firstly, we have to set up the routing system in our application to work with the Loader API. Before now, we have been using the BrowserRouter setup to handle the various routes for our application.<br>Let\u2019s spend a little time talking about\u00a0this.</p>\n<pre>import { BrowserRouter, Routes, Route, Outlet } from \"react-router-dom\"<br>import HomeComponent from \"./home\"<br>import AboutCompoent from \"./about\"<br>function App () {<br>    &lt;BrowserRouter&gt;<br>        &lt;Routes&gt;<br>            &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; } /&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent/&gt; } /&gt;<br>            &lt;/Route&gt;<br>        &lt;/Routes&gt;<br>    &lt;/BrowserRouter&gt;<br>};<br>export default App;</pre>\n<p>Here, we have set up a routing system traditionally using those imports from react-router. <br>Think for a second about what\u2019s happening.</p>\n<p>Well. The BrowserRouter from react-router creates an array of object from the Routes children. The snippet below provides a clear illustration of how this is\u00a0working.</p>\n<pre>BrowserRouter([<br>{<br>    path: '/',<br>    element: &lt;HomeComponent /&gt;,<br>    children: []<br>},<br>{<br>    path: '/about',<br>    element: &lt;AboutComponent/&gt;,<br>    children: []<br>}<br>])</pre>\n<p>If they were to be a nested route, then it appends the children\u2019s route to the children\u2019s key in the parent route.<br>Yes, That\u2019s how it keeps being <strong>recursive.</strong></p>\n<p>However, this method can\u2019t be used to use the <strong>loaderData</strong> hook. We have to do a bit of refactoring. Don\u2019t panic, It\u2019s a bit similar to this. I highly recommend you check out the react-router docs for more information.</p>\n<pre>import { <br>createBrowserRouter,<br>createRoutesFromElements,<br>RouterProvider,<br>Route, <br>Outlet<br> } from \"react-router-dom\"<br><br>import HomeComponent from \"./home\"<br>import AboutComponent from \"./about\"<br><br>function App() {<br>    const browserRoutes = createBrowserRouter(createRoutesFromElements(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; } /&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     return (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</pre>\n<p>I have imported createBrowserRouter, createRoutesFromElement, RouterProvider.<br>Then, initialize a variable named browserRoutes to serve as that object that should be rendered. Noticed that I called the createRoutesFromElements function inside of the createBrowserRouter function. This was because I want to parse or convert the Routes to an object and the createRoutesFromElements as the name implies can help me do that. Then lastly the RouterProvider was returned with the value of the new browserRouter. Let's take a look at what we would have done without using the createRoutesFromElements function.</p>\n<pre>createBrowserRouter([<br>{<br>    path: '/',<br>    element: &lt;HomeComponent /&gt;,<br>    children: []<br>},<br>{<br>    path: '/about',<br>    element: &lt;AboutComponent/&gt;,<br>    children: []<br>}])</pre>\n<p>I am not a big fan of this as your route can even go nested and at some point, this becomes confusing. You should keep things very\u00a0simple.</p>\n<h3>Exploring the Loader functions:</h3>\n<p>As we now have a bit of an understanding of how we can set up our application to use the Loader API, let\u2019s see how we can use the\u00a0API.</p>\n<p>Say you intend to fetch data from an endpoint andto be displayed on the homeComponent. What most developers would do is: initialize a state and update the state in the <strong>useEffect </strong>hook. The snippet below provides a clear illustration of what I am talking\u00a0about.</p>\n<pre>import { useState } from 'react'<br><br>const HomeComponent = () =&gt; {<br>    const [data, setData] = useState([]);<br><br>    useEffect(async () =&gt; {<br>        const request = await fetch('http://localhost:3004/file');<br>         if(!request.ok) throw new Error('Failed to fetch data')<br>        const item= await request.json()<br>        setData(item)  <br>    }, [])<br><br>    return (<br>        &lt;section&gt;<br>            { data.length &gt; 0 ? data.map((foundData) =&gt; (<br>                    &lt;div key={foundData.id}&gt;<br>                        &lt;strong&gt;{foundData.name}&lt;/strong&gt;<br>                     &lt;/div&gt;<br>                 )) : &lt;p&gt;Data currently unavailable&lt;/p&gt;}<br>        &lt;/section&gt;<br>    )<br>}<br>export default HomeComponent</pre>\n<p>This is a tonne of lines as we might want to simplify this a bit and maybe reuse the same function.</p>\n<p>To use <strong>Loaders</strong>, you have to define a <strong>loader </strong>function. Loader functions are like <strong>Custom Hooks</strong>.<br>Besides, the naming convention of the function doesn\u2019t matter as you can call it anything. In the code snippet below, I will create a basic loader function that fetches data from an API like I showed in the snipppet\u00a0above</p>\n<pre>export async function LoaderFunction () {<br>    const request = await fetch('http://localhost:3004/file');<br>    if (!request.ok) throw new Error ('Failed to fetch item')<br>    const item = await  response.json();<br>    return item;<br>};</pre>\n<p>Now, we have to import the loader function to component where our routes are being handled. After setting up your route system using the createBrowserRouter and createRouteFromElements you should have access to a prop called loader. There you should pass in the LoaderFunction you created as the value.<br>In the code snippet below provides a clear illustration of\u00a0this.</p>\n<pre>import { <br>createBrowserRouter,<br>createRoutesFromElements,<br>RouterProvider,<br>Route, <br>Outlet<br> } from \"react-router-dom\"<br>import HomeComponent from \"./home\"<br>import AboutComponent from \"./about\"<br>import { LoaderFunction as HomeLoader} from \"./loader\"<br><br>function App() {<br>    const browserRoutes = createBrowserRouter(createRoutesFromElements(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; }<br>                     loader={HomeLoader}/&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     return (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</pre>\n<p>After that, We can access the data returned by the loader function using the <strong>useLoaderData </strong>Hook from react-router in the HomeComponent.<br>The code snippet below best explains what just\u00a0read.</p>\n<pre>import { useLoaderData } from \"react-router-dom\"<br><br>const HomeComponent = () =&gt; {<br>    const data = useLoaderData();<br><br>    return (<br>        &lt;section&gt;<br>            {data.map((foundData) =&gt; (<br>                    &lt;div key={foundData.id}&gt;<br>                         &lt;strong&gt;{foundData.name}&lt;/strong&gt; <br>                    &lt;/div&gt; <br>            ))}<br>        &lt;/section&gt;<br>    )<br>}<br>export default HomeComponent</pre>\n<p><strong>Wow! \ud83d\ude32..</strong><br>Now see how we have just cleaned up the HomeComponent\u00a0:)<br>Noticed we got rid of the guard clause that checks if the data is null. <br>This is because react-router makes it load the data as soon as the url/path is active. So, it Makes the necessary requests even before the <strong>Component is Mounted</strong>.\u00a0Yes!</p>\n<p>We are only making provisions for the happy path. What if we pass a non-existing endpoint? If that\u2019s the case, don\u2019t panic as react-router also allow us to pass components to another prop called errorElement\u00a0.<br>This is specifically for Errors just as we use ErrorBoundaries. Let's see how this works in the snippet\u00a0below</p>\n<pre>import { <br>createBrowserRouter,<br>createRoutesFromElements,<br>RouterProvider,<br>Route, <br>Outlet<br> } from \"react-router-dom\"<br>import HomeComponent from \"./home\"<br>import AboutComponent from \"./about\"<br>import { LoaderFunction as HomeLoader} from \"./loader\"<br><br>function App() {<br>    const browserRoutes = createBrowserRouter(createRoutesFromElements(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; }<br>                    loader={HomeLoader} errorElement={&lt;h1&gt;An Error occured&lt;/h1&gt;}/&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     return (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</pre>\n<p>I have just used a header tag to show the error. It is advisable you use a Component so that you can also get access to the useRouteError Hook. I'd show how to use the useRouteError Hook in one of my upcoming blog posts. If you're keen to learn about it, Kindly use this <a href=\"https://reactrouter.com/en/main/hooks/use-route-error\">link</a>.<br>Since it pre-fetches the data before mounting the component, the loading state becomes irrelevant as it might either get the data or return the error message the you pass as a value to the <strong>errorElement </strong>prop.</p>\n<p>That\u2019s all of the basics you need to know about making requests using the <strong>Data Layer\u00a0API</strong></p>\n<p>If you found this helpful, please consider following me on <a href=\"https://twitter.com/devodii_\"><strong>Twitter</strong></a>, reacting to this post, leaving a comment, or support me by buying me a coffee through this\u00a0<a href=\"https://www.buymeacoffee.com/emmanuelod5\"><strong>link</strong></a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d91f95891adb\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*lA-_v4GToxBmh1v7D7xk3A.jpeg\"></figure><p><strong>Thank you to our sponsors who keep my articles\u00a0free:</strong></p>\n<p>If you\u2019re building a SaaS, AI tool or any other web app, and you don\u2019t have the all the time to set up boilerplate codes (e.g auth, DNS records, payment webhooks, components, animation, etc),<br>Then, you need <a href=\"https://shipfa.st/?via=76b1ktxw7bbln9yvdrh9\">ShipFast</a>. Shipfast saves 18+ hrs of development headache\u00a0, it\u2019s trusted by 300+ devs and it has a very great documentation.</p>\n<p>Today, I want to show you an alternative for the <strong>useState</strong> and <strong>useEffect</strong> hook in React. (<em>It reduces a lot of boilerplate codes)</em></p>\n<p>Many developers continue to use the useState and useEffect hooks to update states, but I have not been fond of this approach. The issue is that it causes the component to mount, remount, and unmount simultaneously, leading to unexpected behavior. As a result, when logging something into the console, you may see the result repeated three\u00a0times.</p>\n<h3>Introducing the useLoaderData Hook:</h3>\n<p>The useLoaderData hook is a custom hook in React that helps you load data into your component. It simplifies the process of fetching data from an API or performing any asynchronous operation.</p>\n<p>When you use the useLoaderData hook, you provide it with a function that returns a Promise. This Promise represents an asynchronous operation that will fetch the data you need. Once the Promise resolves, the data becomes available to your component.</p>\n<p>The useLoaderData hook handles the loading state for you, so you don't need to manually track whether the data is still loading or if it has finished loading. It provides you with a convenient way to access the data and also handles any potential errors that might occur during the data loading\u00a0process.</p>\n<p>By using the useLoaderData hook, you can keep your component code clean and organized, separating the data-loading logic from the rest of your component's responsibilities. It allows you to easily fetch and manage data in a more beginner-friendly way.</p>\n<h3>Why the useLoaderHook?</h3>\n<p>The useLoaderHook from react-router helps achieve the same functionality with minimal effort. These are some examples of why you should use\u00a0it.</p>\n<ul>\n<li>\n<strong>Loading state management</strong>: Loaders handle the loading state for you, providing a clear indication of when data is being fetched. This helps you manage loading spinners, progress indicators, or any other UI elements related to data\u00a0loading.</li>\n<li>\n<strong>Error handling</strong>: Loaders often include error handling mechanisms, allowing you to handle and display errors that occur during the data loading process. They provide a standardized way to handle errors, making it easier to implement consistent error handling across your application.</li>\n<li>\n<strong>Separation of concerns</strong>: Loaders allow you to separate the data loading logic from other aspects of your component. This promotes better code organization and maintainability, as you can focus on specific responsibilities without mixing\u00a0them.</li>\n</ul>\n<p>And lots\u00a0more.</p>\n<h3>Let\u2019s see How This\u00a0Works.</h3>\n<p>It\u2019s assumed that you have a good knowledge of how react-router 6 works. If you don\u2019t, Feel free to check out the docs\u00a0<a href=\"https://reactrouter.com/en/main\">here</a></p>\n<p>Firstly, we have to set up the routing system in our application to work with the Loader API. Before now, we have been using the BrowserRouter setup to handle the various routes for our application.<br>Let\u2019s spend a little time talking about\u00a0this.</p>\n<pre>import { BrowserRouter, Routes, Route, Outlet } from \"react-router-dom\"<br>import HomeComponent from \"./home\"<br>import AboutCompoent from \"./about\"<br>function App () {<br>    &lt;BrowserRouter&gt;<br>        &lt;Routes&gt;<br>            &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; } /&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent/&gt; } /&gt;<br>            &lt;/Route&gt;<br>        &lt;/Routes&gt;<br>    &lt;/BrowserRouter&gt;<br>};<br>export default App;</pre>\n<p>Here, we have set up a routing system traditionally using those imports from react-router. <br>Think for a second about what\u2019s happening.</p>\n<p>Well. The BrowserRouter from react-router creates an array of object from the Routes children. The snippet below provides a clear illustration of how this is\u00a0working.</p>\n<pre>BrowserRouter([<br>{<br>    path: '/',<br>    element: &lt;HomeComponent /&gt;,<br>    children: []<br>},<br>{<br>    path: '/about',<br>    element: &lt;AboutComponent/&gt;,<br>    children: []<br>}<br>])</pre>\n<p>If they were to be a nested route, then it appends the children\u2019s route to the children\u2019s key in the parent route.<br>Yes, That\u2019s how it keeps being <strong>recursive.</strong></p>\n<p>However, this method can\u2019t be used to use the <strong>loaderData</strong> hook. We have to do a bit of refactoring. Don\u2019t panic, It\u2019s a bit similar to this. I highly recommend you check out the react-router docs for more information.</p>\n<pre>import { <br>createBrowserRouter,<br>createRoutesFromElements,<br>RouterProvider,<br>Route, <br>Outlet<br> } from \"react-router-dom\"<br><br>import HomeComponent from \"./home\"<br>import AboutComponent from \"./about\"<br><br>function App() {<br>    const browserRoutes = createBrowserRouter(createRoutesFromElements(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; } /&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     return (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</pre>\n<p>I have imported createBrowserRouter, createRoutesFromElement, RouterProvider.<br>Then, initialize a variable named browserRoutes to serve as that object that should be rendered. Noticed that I called the createRoutesFromElements function inside of the createBrowserRouter function. This was because I want to parse or convert the Routes to an object and the createRoutesFromElements as the name implies can help me do that. Then lastly the RouterProvider was returned with the value of the new browserRouter. Let's take a look at what we would have done without using the createRoutesFromElements function.</p>\n<pre>createBrowserRouter([<br>{<br>    path: '/',<br>    element: &lt;HomeComponent /&gt;,<br>    children: []<br>},<br>{<br>    path: '/about',<br>    element: &lt;AboutComponent/&gt;,<br>    children: []<br>}])</pre>\n<p>I am not a big fan of this as your route can even go nested and at some point, this becomes confusing. You should keep things very\u00a0simple.</p>\n<h3>Exploring the Loader functions:</h3>\n<p>As we now have a bit of an understanding of how we can set up our application to use the Loader API, let\u2019s see how we can use the\u00a0API.</p>\n<p>Say you intend to fetch data from an endpoint andto be displayed on the homeComponent. What most developers would do is: initialize a state and update the state in the <strong>useEffect </strong>hook. The snippet below provides a clear illustration of what I am talking\u00a0about.</p>\n<pre>import { useState } from 'react'<br><br>const HomeComponent = () =&gt; {<br>    const [data, setData] = useState([]);<br><br>    useEffect(async () =&gt; {<br>        const request = await fetch('http://localhost:3004/file');<br>         if(!request.ok) throw new Error('Failed to fetch data')<br>        const item= await request.json()<br>        setData(item)  <br>    }, [])<br><br>    return (<br>        &lt;section&gt;<br>            { data.length &gt; 0 ? data.map((foundData) =&gt; (<br>                    &lt;div key={foundData.id}&gt;<br>                        &lt;strong&gt;{foundData.name}&lt;/strong&gt;<br>                     &lt;/div&gt;<br>                 )) : &lt;p&gt;Data currently unavailable&lt;/p&gt;}<br>        &lt;/section&gt;<br>    )<br>}<br>export default HomeComponent</pre>\n<p>This is a tonne of lines as we might want to simplify this a bit and maybe reuse the same function.</p>\n<p>To use <strong>Loaders</strong>, you have to define a <strong>loader </strong>function. Loader functions are like <strong>Custom Hooks</strong>.<br>Besides, the naming convention of the function doesn\u2019t matter as you can call it anything. In the code snippet below, I will create a basic loader function that fetches data from an API like I showed in the snipppet\u00a0above</p>\n<pre>export async function LoaderFunction () {<br>    const request = await fetch('http://localhost:3004/file');<br>    if (!request.ok) throw new Error ('Failed to fetch item')<br>    const item = await  response.json();<br>    return item;<br>};</pre>\n<p>Now, we have to import the loader function to component where our routes are being handled. After setting up your route system using the createBrowserRouter and createRouteFromElements you should have access to a prop called loader. There you should pass in the LoaderFunction you created as the value.<br>In the code snippet below provides a clear illustration of\u00a0this.</p>\n<pre>import { <br>createBrowserRouter,<br>createRoutesFromElements,<br>RouterProvider,<br>Route, <br>Outlet<br> } from \"react-router-dom\"<br>import HomeComponent from \"./home\"<br>import AboutComponent from \"./about\"<br>import { LoaderFunction as HomeLoader} from \"./loader\"<br><br>function App() {<br>    const browserRoutes = createBrowserRouter(createRoutesFromElements(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; }<br>                     loader={HomeLoader}/&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     return (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</pre>\n<p>After that, We can access the data returned by the loader function using the <strong>useLoaderData </strong>Hook from react-router in the HomeComponent.<br>The code snippet below best explains what just\u00a0read.</p>\n<pre>import { useLoaderData } from \"react-router-dom\"<br><br>const HomeComponent = () =&gt; {<br>    const data = useLoaderData();<br><br>    return (<br>        &lt;section&gt;<br>            {data.map((foundData) =&gt; (<br>                    &lt;div key={foundData.id}&gt;<br>                         &lt;strong&gt;{foundData.name}&lt;/strong&gt; <br>                    &lt;/div&gt; <br>            ))}<br>        &lt;/section&gt;<br>    )<br>}<br>export default HomeComponent</pre>\n<p><strong>Wow! \ud83d\ude32..</strong><br>Now see how we have just cleaned up the HomeComponent\u00a0:)<br>Noticed we got rid of the guard clause that checks if the data is null. <br>This is because react-router makes it load the data as soon as the url/path is active. So, it Makes the necessary requests even before the <strong>Component is Mounted</strong>.\u00a0Yes!</p>\n<p>We are only making provisions for the happy path. What if we pass a non-existing endpoint? If that\u2019s the case, don\u2019t panic as react-router also allow us to pass components to another prop called errorElement\u00a0.<br>This is specifically for Errors just as we use ErrorBoundaries. Let's see how this works in the snippet\u00a0below</p>\n<pre>import { <br>createBrowserRouter,<br>createRoutesFromElements,<br>RouterProvider,<br>Route, <br>Outlet<br> } from \"react-router-dom\"<br>import HomeComponent from \"./home\"<br>import AboutComponent from \"./about\"<br>import { LoaderFunction as HomeLoader} from \"./loader\"<br><br>function App() {<br>    const browserRoutes = createBrowserRouter(createRoutesFromElements(<br>       &lt;Route path='/' element={&lt;Outlet /&gt;}&gt;<br>                &lt;Route index element={&lt;HomeComponent /&gt; }<br>                    loader={HomeLoader} errorElement={&lt;h1&gt;An Error occured&lt;/h1&gt;}/&gt;<br>                &lt;Route path='about' element={&lt;AboutComponent /&gt; } /&gt;<br>        &lt;/Route&gt;<br>    ))<br><br>     return (<br>        &lt;RouterProvider router={browserRoutes} /&gt;<br>    );<br>}</pre>\n<p>I have just used a header tag to show the error. It is advisable you use a Component so that you can also get access to the useRouteError Hook. I'd show how to use the useRouteError Hook in one of my upcoming blog posts. If you're keen to learn about it, Kindly use this <a href=\"https://reactrouter.com/en/main/hooks/use-route-error\">link</a>.<br>Since it pre-fetches the data before mounting the component, the loading state becomes irrelevant as it might either get the data or return the error message the you pass as a value to the <strong>errorElement </strong>prop.</p>\n<p>That\u2019s all of the basics you need to know about making requests using the <strong>Data Layer\u00a0API</strong></p>\n<p>If you found this helpful, please consider following me on <a href=\"https://twitter.com/devodii_\"><strong>Twitter</strong></a>, reacting to this post, leaving a comment, or support me by buying me a coffee through this\u00a0<a href=\"https://www.buymeacoffee.com/emmanuelod5\"><strong>link</strong></a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d91f95891adb\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["javascript","typescript","react-router","react","react-hook"]}]}